# Generated by Django 5.1.3 on 2024-11-15 14:11

import django.db.models.deletion
import taggit.managers
from django.conf import settings
from django.db import migrations, models
from django.utils import timezone


def create_default_user(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    Post = apps.get_model('blog', 'Post')
    
    # Create default user if it doesn't exist
    default_user, created = User.objects.get_or_create(
        username='sensei_panda',
        defaults={
            'email': 'sensei@mypandablog.com',
            'is_staff': True,
            'is_superuser': True,
            'date_joined': timezone.now(),
            'password': 'pbkdf2_sha256$600000$changeme123'  # Using a hashed password
        }
    )
    
    # Update all posts to use the default user's username
    Post.objects.all().update(author=default_user.username)

def reverse_default_user(apps, schema_editor):
    Post = apps.get_model('blog', 'Post')
    Post.objects.all().update(author='Sensei Panda')


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
        ('blog', '0014_alter_category_title_alter_post_title_and_more'),
    ]

    operations = [
        # First create the user
        migrations.RunPython(
            create_default_user,
            reverse_default_user
        ),
        
        migrations.CreateModel(
            name='Newsletter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('confirmed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PostView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('location', models.CharField(blank=True, max_length=30)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('website', models.URLField(blank=True)),
                ('twitter', models.URLField(blank=True)),
                ('facebook', models.URLField(blank=True)),
                ('instagram', models.URLField(blank=True)),
                ('linkedin', models.URLField(blank=True)),
                ('github', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='recommendation',
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name='recommendation',
            name='post',
        ),
        migrations.RemoveField(
            model_name='recommendation',
            name='recommended_post',
        ),
        migrations.RemoveField(
            model_name='post',
            name='sentiment',
        ),
        migrations.AddField(
            model_name='category',
            name='description',
            field=models.TextField(blank=True, help_text='A detailed description of the category'),
        ),
        migrations.AddField(
            model_name='category',
            name='meta_description',
            field=models.CharField(blank=True, help_text='Meta description for SEO', max_length=160),
        ),
        migrations.AddField(
            model_name='comment',
            name='is_approved',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='comment',
            name='likes',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='comment',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='blog.comment'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='comment',
            name='website',
            field=models.URLField(blank=True),
        ),
        migrations.AddField(
            model_name='post',
            name='bookmarks',
            field=models.ManyToManyField(blank=True, related_name='bookmarked_posts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='post',
            name='canonical_url',
            field=models.URLField(blank=True, help_text='The canonical URL for this post if it exists elsewhere'),
        ),
        migrations.AddField(
            model_name='post',
            name='featured',
            field=models.BooleanField(default=False, help_text='Feature this post on the homepage'),
        ),
        migrations.AddField(
            model_name='post',
            name='likes',
            field=models.ManyToManyField(blank=True, related_name='liked_posts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='post',
            name='meta_description',
            field=models.CharField(blank=True, help_text='Meta description for SEO', max_length=160),
        ),
        migrations.AddField(
            model_name='post',
            name='meta_title',
            field=models.CharField(blank=True, help_text='Meta title for SEO', max_length=70),
        ),
        migrations.AddField(
            model_name='post',
            name='published_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='post',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='post',
            name='video_url',
            field=models.URLField(blank=True, help_text='URL to embedded video content'),
        ),
        migrations.AddField(
            model_name='post',
            name='views_count',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='category',
            name='slug',
            field=models.SlugField(help_text='URL-friendly version of the category name', unique=True),
        ),
        migrations.AlterField(
            model_name='comment',
            name='email',
            field=models.EmailField(help_text='Will not be published', max_length=254),
        ),
        migrations.AlterField(
            model_name='post',
            name='author',
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name='post',
            name='slug',
            field=models.SlugField(help_text='URL-friendly version of the title', unique=True),
        ),
        migrations.AlterField(
            model_name='post',
            name='status',
            field=models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('scheduled', 'Scheduled')], default='draft', max_length=10),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['user', 'created_at'], name='blog_commen_user_id_88a23e_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['author', 'status'], name='blog_post_author__95cbf7_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['status', 'published_at'], name='blog_post_status_5b2843_idx'),
        ),
        migrations.AddField(
            model_name='postview',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='blog.post'),
        ),
        migrations.AddField(
            model_name='postview',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.DeleteModel(
            name='Recommendation',
        ),
        migrations.AddIndex(
            model_name='postview',
            index=models.Index(fields=['post', 'created_at'], name='blog_postvi_post_id_2e6acd_idx'),
        ),
        migrations.AddIndex(
            model_name='postview',
            index=models.Index(fields=['user', 'created_at'], name='blog_postvi_user_id_9c880f_idx'),
        ),
    ]
